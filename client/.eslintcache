[{"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\reportWebVitals.js":"1","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\App.js":"2","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\index.js":"3","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\Header.js":"4","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\Recommender\\Recommender.js":"5","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\AnimeListPage\\AnimeList.js":"6","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\AnimeListPage\\AnimeListPage.js":"7","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\Main.js":"8","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\Home.js":"9"},{"size":362,"mtime":1608811433867,"results":"10","hashOfConfig":"11"},{"size":169,"mtime":1613554256067,"results":"12","hashOfConfig":"13"},{"size":552,"mtime":1613552323330,"results":"14","hashOfConfig":"13"},{"size":1934,"mtime":1612602029564,"results":"15","hashOfConfig":"13"},{"size":4405,"mtime":1613567385680,"results":"16","hashOfConfig":"13"},{"size":1898,"mtime":1613553309538,"results":"17","hashOfConfig":"13"},{"size":1689,"mtime":1613567347596,"results":"18","hashOfConfig":"13"},{"size":390,"mtime":1613552612246,"results":"19","hashOfConfig":"13"},{"size":2899,"mtime":1613552760746,"results":"20","hashOfConfig":"13"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"klfvv",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l1agb",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\App.js",[],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\index.js",[],["43","44"],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\Header.js",["45","46","47"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport logo from '../logo.svg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolbar: {\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  toolbarTitle: {\r\n    flex: 1,\r\n    color: `#ee4466`,\r\n    textDecoration: `none`,\r\n    fontWeight: `300`,\r\n    fontStyle: `italic`,\r\n  },\r\n  toolbarSecondary: {\r\n    justifyContent: 'flex-end',\r\n    overflowX: 'auto',\r\n  },\r\n  toolbarLink: {\r\n    padding: theme.spacing(1),\r\n    flexShrink: 0,\r\n  }\r\n}));\r\n\r\nexport default function Header(props) {\r\n  const classes = useStyles();\r\n  const { sections, title } = props;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar className={classes.toolbar}>\r\n      <img src={logo} alt=\"React Logo\" style={{\r\n        paddingRight: '10px',\r\n        width: '50px'\r\n      }}/>\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h4\"\r\n          color=\"inherit\"\r\n          align=\"left\"\r\n          noWrap\r\n          className={classes.toolbarTitle}\r\n        >\r\n          <i>{title}</i>\r\n        </Typography>\r\n        {sections.map((section) => (\r\n          <Button\r\n            variant=\"outlined\" size=\"small\" href={section.url} style={{\r\n              margin: '5px'\r\n            }}\r\n          >\r\n            {section.title}\r\n          </Button>\r\n        ))}\r\n      </Toolbar>\r\n      <Toolbar component=\"nav\" variant=\"dense\" className={classes.toolbarSecondary}>\r\n      </Toolbar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  sections: PropTypes.array,\r\n  title: PropTypes.string,\r\n};","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\Recommender\\Recommender.js",["48","49"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        width: '80%',\r\n        margin: 'auto',\r\n        textAlign: 'center'\r\n    },\r\n    list: {\r\n        margin: 'auto',\r\n        width: '50%',\r\n        marginTop: '20px'\r\n    },\r\n    listItem: {\r\n        marginTop: '15px',\r\n        marginBottom: '15px'\r\n    },\r\n    animeGrid: {\r\n        marginTop: '20px'\r\n    },\r\n    animeCard: {\r\n        width: \"200px\",\r\n        height: \"100\"\r\n    }\r\n}));\r\n\r\nfunction Recommender() {\r\n    const classes = useStyles();\r\n    const [ question, setQuestion ] = useState(\"\"); \r\n    const [ questionID, setQuestionID ] = useState(0);\r\n    const [ content, setContent ] = useState([]);\r\n    const [ buttonPressed, setButtonPressed ] = useState(false);\r\n    const [ selectedOption, setSelectedOption ] = useState(0);\r\n    console.log('re-render');\r\n\r\n    const onClickOption = (index) => {\r\n        setSelectedOption(index);\r\n        setButtonPressed(true);\r\n    }\r\n    \r\n    const createOptionList = (options) => {\r\n        return (\r\n            <List component=\"ul\" aria-label=\"options\" className={classes.list}>\r\n            {options.map((option, index) => {\r\n                return (\r\n                    <ListItem\r\n                        button\r\n                        onClick={() => onClickOption(index)}\r\n                        className={classes.listItem}\r\n                        key={index}\r\n                    >\r\n                    <ListItemText primary={option.option} />\r\n                    </ListItem>\r\n                )\r\n            })}\r\n            </List>\r\n        )\r\n    }\r\n\r\n    const createAnimeList = (animes) => {\r\n        return (\r\n            <Grid container spacing={3}  direction=\"column\" alignItems=\"center\"\r\n            justify=\"center\" className={classes.animeGrid}>\r\n                {animes.map((anime, index) => {\r\n                    return (\r\n                        <Grid key={index} item xs>\r\n                            <Card className={classes.animeCard}>\r\n                                <CardContent>\r\n                                    <Typography variant=\"body1\" gutterBottom>\r\n                                        {anime.name}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    );\r\n                })}\r\n            </Grid>\r\n        );\r\n    }\r\n    useEffect(() => {\r\n        fetch('/api/recommender/start').then( (response) => response.json()).then( (resJson) => {\r\n            if (resJson.type === \"question\") {\r\n                setQuestion(resJson.question);\r\n                setQuestionID(resJson.current_id);\r\n                setContent(createOptionList(resJson.options));\r\n            }\r\n            else if (resJson.type === \"anime\") {\r\n                setQuestion(\"Here are the results!\")\r\n                setContent(createAnimeList(resJson.animes));\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (buttonPressed) {\r\n            fetch(`/api/recommender/next?question=${questionID}&option=${selectedOption}`)\r\n            .then( (response) => response.json()).then( (resJson) => {\r\n            if (resJson.type === \"question\") {\r\n                setQuestion(resJson.question);\r\n                setQuestionID(resJson.current_id);\r\n                setContent(createOptionList(resJson.options));\r\n            }\r\n            else if (resJson.type === \"anime\") {\r\n                setQuestion(\"Here are the results!\");\r\n                setContent(createAnimeList(resJson.animes));\r\n            }\r\n            setButtonPressed(false);\r\n        })\r\n        }\r\n    }, [buttonPressed]);\r\n    \r\n    return (\r\n        <div className={classes.container}>\r\n            <Typography variant=\"h5\">\r\n              <i>{question}</i>\r\n            </Typography>\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recommender;","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\AnimeListPage\\AnimeList.js",[],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\AnimeListPage\\AnimeListPage.js",[],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\Main.js",["50","51"],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\Home.js",["52"],"import './App.css';\r\nimport React, { useState } from 'react';\r\nimport Header from './components/Header';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport Recommender from './components/Recommender/Recommender';\r\n\r\nconst THEME = createMuiTheme({\r\n  typography: {\r\n    \"fontFamily\": `\"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\r\n    \"fontSize\": 16,\r\n    \"fontWeightLight\": 300,\r\n    \"fontWeightRegular\": 400,\r\n    \"fontWeightMedium\": 400\r\n  },\r\n});\r\n\r\nconst sections = [\r\n  { title: 'Home', url: '/' },\r\n  { title: 'Anime List', url: '/anime-list' },\r\n  { title: 'API', url: 'https://khxia.github.io' }\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  sectionContainer: {\r\n    width: '80%',\r\n    margin: 'auto'\r\n  }\r\n}));\r\n\r\nfunction Home() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <MuiThemeProvider theme={THEME}>\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header title=\"AniRec | Anime Recommender API\" sections={sections} />\r\n      <main>\r\n      <div className={classes.sectionContainer}>\r\n        <Typography variant=\"h4\" component=\"h2\">\r\n          Welcome to AniRec\r\n        </Typography>\r\n        <p>\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            If you've ever wanted to watch an anime but don't know what's good,\r\n            you've come to the right place. This recommender will ask you a series of questions about the \r\n            type of anime that you want to watch. Answer them truthfully and you will discover\r\n            another great anime! Whether or not this is your first anime or hundredth, \r\n            hopefully this will be a useful tool for you. \r\n          </Typography>\r\n        </p>\r\n        <p>\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            The recommendations for this anime are based \r\n            heavily on this <a href=\"https://imgur.com/gallery/q9Xjv4p\">flowchart</a> (that I don't take credit \r\n            for) with a bit of \r\n            my personal recommendations. If you want a rough top-level view of the recommender, please \r\n            check it out.\r\n          </Typography>\r\n        </p>\r\n        <p>\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            If you want to incorporate this recommender into your own apps, check out the <a \r\n            href=\"https://khxia.github.io\">API</a> for AniRec.\r\n          </Typography>\r\n        </p>\r\n        <br />\r\n        <Typography variant=\"h4\" component=\"h2\">\r\n          Recommender\r\n        </Typography>\r\n        <br/>\r\n        <Recommender />\r\n      </div>\r\n      </main>\r\n      </Container>\r\n    </React.Fragment>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":6,"column":8,"nodeType":"59","messageId":"60","endLine":6,"endColumn":18},{"ruleId":"57","severity":1,"message":"61","line":7,"column":8,"nodeType":"59","messageId":"60","endLine":7,"endColumn":18},{"ruleId":"57","severity":1,"message":"62","line":9,"column":8,"nodeType":"59","messageId":"60","endLine":9,"endColumn":12},{"ruleId":"63","severity":1,"message":"64","line":101,"column":8,"nodeType":"65","endLine":101,"endColumn":10,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"67","line":119,"column":8,"nodeType":"65","endLine":119,"endColumn":23,"suggestions":"68"},{"ruleId":"57","severity":1,"message":"69","line":4,"column":8,"nodeType":"59","messageId":"60","endLine":4,"endColumn":11},{"ruleId":"70","severity":2,"message":"71","line":10,"column":40,"nodeType":"59","messageId":"72","endLine":10,"endColumn":44},{"ruleId":"57","severity":1,"message":"73","line":2,"column":17,"nodeType":"59","messageId":"60","endLine":2,"endColumn":25},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'SearchIcon' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createAnimeList' and 'createOptionList'. Either include them or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has missing dependencies: 'createAnimeList', 'createOptionList', 'questionID', and 'selectedOption'. Either include them or remove the dependency array.",["77"],"'App' is defined but never used.","no-undef","'Home' is not defined.","undef","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [createAnimeList, createOptionList]",{"range":"82","text":"83"},"Update the dependencies array to be: [buttonPressed, createAnimeList, createOptionList, questionID, selectedOption]",{"range":"84","text":"85"},[3442,3444],"[createAnimeList, createOptionList]",[4144,4159],"[buttonPressed, createAnimeList, createOptionList, questionID, selectedOption]"]
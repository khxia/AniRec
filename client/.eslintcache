[{"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\reportWebVitals.js":"1","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\App.js":"2","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\index.js":"3","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\Header.js":"4","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\Recommender\\Recommender.js":"5","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\AnimeListPage\\AnimeList.js":"6","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\AnimeListPage\\AnimeListPage.js":"7","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\Main.js":"8","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\Home.js":"9","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\APIPage\\APIPage.js":"10"},{"size":362,"mtime":1608811433867,"results":"11","hashOfConfig":"12"},{"size":169,"mtime":1613554256067,"results":"13","hashOfConfig":"14"},{"size":552,"mtime":1613552323330,"results":"15","hashOfConfig":"14"},{"size":1934,"mtime":1616583969197,"results":"16","hashOfConfig":"14"},{"size":7773,"mtime":1616583720128,"results":"17","hashOfConfig":"14"},{"size":1898,"mtime":1616495123767,"results":"18","hashOfConfig":"14"},{"size":1670,"mtime":1616764473824,"results":"19","hashOfConfig":"14"},{"size":500,"mtime":1616755412667,"results":"20","hashOfConfig":"14"},{"size":2888,"mtime":1616764492608,"results":"21","hashOfConfig":"14"},{"size":6834,"mtime":1616764457666,"results":"22","hashOfConfig":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"klfvv",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l1agb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\App.js",[],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\index.js",[],["47","48"],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\Header.js",["49","50","51"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport logo from '../logo.svg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolbar: {\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  toolbarTitle: {\r\n    flex: 1,\r\n    color: `#ee4466`,\r\n    textDecoration: `none`,\r\n    fontWeight: `300`,\r\n    fontStyle: `italic`,\r\n  },\r\n  toolbarSecondary: {\r\n    justifyContent: 'flex-end',\r\n    overflowX: 'auto',\r\n  },\r\n  toolbarLink: {\r\n    padding: theme.spacing(1),\r\n    flexShrink: 0,\r\n  }\r\n}));\r\n\r\nexport default function Header(props) {\r\n  const classes = useStyles();\r\n  const { sections, title } = props;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar className={classes.toolbar}>\r\n      <img src={logo} alt=\"React Logo\" style={{\r\n        paddingRight: '10px',\r\n        width: '50px'\r\n      }}/>\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h4\"\r\n          color=\"inherit\"\r\n          align=\"left\"\r\n          noWrap\r\n          className={classes.toolbarTitle}\r\n        >\r\n          <i>{title}</i>\r\n        </Typography>\r\n        {sections.map((section) => (\r\n          <Button\r\n            variant=\"outlined\" size=\"small\" href={section.url} style={{\r\n              margin: '5px'\r\n            }}\r\n          >\r\n            {section.title}\r\n          </Button>\r\n        ))}\r\n      </Toolbar>\r\n      <Toolbar component=\"nav\" variant=\"dense\" className={classes.toolbarSecondary}>\r\n      </Toolbar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  sections: PropTypes.array,\r\n  title: PropTypes.string,\r\n};","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\Recommender\\Recommender.js",["52","53","54"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardActions from '@material-ui/core/CardActions';\r\n\r\nimport mal_icon from './mal_icon.png'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        width: '80%',\r\n        margin: 'auto',\r\n        textAlign: 'center'\r\n    },\r\n    list: {\r\n        margin: 'auto',\r\n        width: '50%',\r\n        marginTop: '20px'\r\n    },\r\n    listItem: {\r\n        marginTop: '15px',\r\n        marginBottom: '15px'\r\n    },\r\n    animeGrid: {\r\n        marginTop: '20px'\r\n    },\r\n    animeCard: {\r\n        width: 225\r\n    },\r\n    media: {\r\n        width: 225,\r\n        height: 314,\r\n        borderRadius: '5%'\r\n    },\r\n    tags: {\r\n        fontSize: 12,\r\n    },\r\n    cardContent: {\r\n        textAlign: 'left',\r\n        padding: '12px 16px 4px'\r\n    },\r\n    malIcon: {\r\n        borderRadius: \"50%\"\r\n    },\r\n    cardActions: {\r\n        alignItems: 'center',\r\n        padding: '8px',\r\n        display: 'block'\r\n    },\r\n    cardHeader: {\r\n        padding: '4px 8px 8px'\r\n    }\r\n}));\r\n\r\nfunction Recommender() {\r\n    const classes = useStyles();\r\n    const [ question, setQuestion ] = useState(\"\"); \r\n    const [ questionID, setQuestionID ] = useState(0);\r\n    const [ content, setContent ] = useState([]);\r\n    const [ buttonPressed, setButtonPressed ] = useState(false);\r\n    const [ selectedOption, setSelectedOption ] = useState(0);\r\n    console.log('re-render');\r\n\r\n    const onClickOption = (index) => {\r\n        setSelectedOption(index);\r\n        setButtonPressed(true);\r\n    }\r\n    \r\n    const createOptionList = (options) => {\r\n        return (\r\n            <List component=\"ul\" aria-label=\"options\" className={classes.list}>\r\n            {options.map((option, index) => {\r\n                return (\r\n                    <ListItem\r\n                        button\r\n                        onClick={() => onClickOption(index)}\r\n                        className={classes.listItem}\r\n                        key={index}\r\n                    >\r\n                    <ListItemText primary={option.option} />\r\n                    </ListItem>\r\n                )\r\n            })}\r\n            </List>\r\n        )\r\n    }\r\n\r\n    const createAnimeList = async (animes) => {\r\n        const animes_list = [];\r\n        try {\r\n            for (const anime of animes) {\r\n                const res = await fetch(`https://api.jikan.moe/v3/anime/${anime.mal_id}`);\r\n                const obj = await res.json();\r\n                console.log(obj);\r\n                let genre_str = \"\";\r\n                for (const genre of obj.genres) {\r\n                    genre_str = genre_str.concat(`${genre.name} `);\r\n                }\r\n                animes_list.push({\r\n                    id: anime.id,\r\n                    mal_id: anime.mal_id,\r\n                    image: obj.image_url,\r\n                    url: obj.url,\r\n                    name: obj.title,\r\n                    score: obj.score,\r\n                    genre: genre_str,\r\n                    episodes: obj.episodes\r\n                })\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n        return (\r\n            <Grid container spacing={3}  direction=\"row\" alignItems=\"flex-start\"\r\n            justify=\"center\" className={classes.animeGrid}>\r\n                {animes_list.map((anime, index) => {\r\n                    return (\r\n                        <Grid key={index} item xs>\r\n                            <Card className={classes.animeCard}>\r\n                                <CardHeader\r\n                                  className={classes.cardHeader}\r\n                                  title={\r\n                                      <Typography variant=\"subtitle1\" component=\"h6\">\r\n                                          <b>{anime.name}</b>\r\n                                      </Typography>\r\n                                    }\r\n                                  subheader={\r\n                                    <Typography variant=\"subtitle2\" component=\"h6\">\r\n                                        <i>{`${anime.episodes} episodes`}</i>\r\n                                    </Typography>\r\n                                  }\r\n                                />\r\n                                <CardMedia\r\n                                  className={classes.media}\r\n                                  image={anime.image}\r\n                                  title=\"cover photo\"\r\n                                />\r\n                                <CardContent className={classes.cardContent}>\r\n                                    <Typography className={classes.tags} variant=\"body2\">\r\n                                        <b>Tags:</b> {anime.genre}\r\n                                    </Typography>\r\n                                    <Typography className={classes.tags} variant=\"body2\">\r\n                                        <b>MAL Score:</b> {anime.score}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions className={classes.cardActions} disableSpacing>\r\n                                  <Link href={anime.url} target=\"_blank\" rel=\"noreferrer\">\r\n                                      <img className={classes.malIcon} src={mal_icon} width=\"30\" height=\"30\"/>\r\n                                  </Link>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    );\r\n                })}\r\n            </Grid>\r\n        );\r\n    }\r\n    useEffect(() => {\r\n        fetch('/api/recommender/start').then( (response) => response.json()).then( (resJson) => {\r\n            if (resJson.type === \"question\") {\r\n                setQuestion(resJson.question);\r\n                setQuestionID(resJson.current_id);\r\n                setContent(createOptionList(resJson.options));\r\n            }\r\n            else if (resJson.type === \"anime\") {\r\n                setQuestion(\"Here are the results!\")\r\n                createAnimeList(resJson.animes).then((newGrid) => {\r\n                    setContent(newGrid);\r\n                })\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (buttonPressed) {\r\n            fetch(`/api/recommender/next?question=${questionID}&option=${selectedOption}`)\r\n            .then( (response) => response.json()).then( (resJson) => {\r\n            if (resJson.type === \"question\") {\r\n                setQuestion(resJson.question);\r\n                setQuestionID(resJson.current_id);\r\n                setContent(createOptionList(resJson.options));\r\n            }\r\n            else if (resJson.type === \"anime\") {\r\n                setQuestion(\"Here are the results!\");\r\n                createAnimeList(resJson.animes).then((newGrid) => {\r\n                    setContent(newGrid);\r\n                })\r\n            }\r\n            setButtonPressed(false);\r\n        })\r\n        }\r\n    }, [buttonPressed]);\r\n    \r\n    return (\r\n        <div className={classes.container}>\r\n            <Typography variant=\"h5\">\r\n              <i>{question}</i>\r\n            </Typography>\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recommender;","C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\AnimeListPage\\AnimeList.js",[],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\AnimeListPage\\AnimeListPage.js",[],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\Main.js",[],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\Home.js",["55"],"C:\\Users\\User\\Desktop\\all\\anime-rec-api\\client\\src\\components\\APIPage\\APIPage.js",["56"],"import React from 'react';\r\nimport Header from '../Header';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport Prism from \"prismjs\";\r\n\r\nimport \"../../prism.css\";\r\n\r\nconst THEME = createMuiTheme({\r\n    typography: {\r\n      \"fontFamily\": `\"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\r\n      \"fontSize\": 16,\r\n      \"fontWeightLight\": 300,\r\n      \"fontWeightRegular\": 400,\r\n      \"fontWeightMedium\": 400\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: '#000000',\r\n        },\r\n        secondary: {\r\n            main: '#ee4466',\r\n        },\r\n        text: {\r\n            secondary: '#ee4466'\r\n        }\r\n    }   \r\n  });\r\n\r\nconst sections = [\r\n  { title: 'Home', url: '/' },\r\n  { title: 'Anime List', url: '/anime-list' },\r\n  { title: 'API', url: '/api' }\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    sectionContainer: {\r\n      width: '80%',\r\n      margin: 'auto'\r\n    }\r\n  }));\r\n\r\n  function APIPage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n    <MuiThemeProvider theme={THEME}>\r\n    <React.Fragment>\r\n    <CssBaseline />\r\n    <Container maxWidth=\"lg\">\r\n        <Header title=\"AniRec | Anime Recommender API\" sections={sections} />\r\n      <main>\r\n      <div className={classes.sectionContainer}>\r\n        <Typography variant=\"h4\" component=\"h2\">\r\n          API\r\n        </Typography>\r\n        <p>\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            This API is designed as a stateless protocol. Which means that all requests are anonymous, \r\n            and requests has no relation between each other. While this means that none of your user \r\n            data is stored, it does mean that you are responsible for maintaining state within your app.\r\n          </Typography>\r\n          <br />\r\n          <Typography variant=\"body1\" gutterBottom>View on <b><a href=\"https://github.com/khxia/AniRec\">Github.</a></b></Typography>\r\n          <br />\r\n          <Typography variant=\"body1\" gutterBottom><i>\r\n          NOTE: The first request will likely have a substantial response time because this project is \r\n          deployed on a free Heroku dyno. Any subsequent requests will behave normally.\r\n          </i></Typography>\r\n          <br />\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            The base URL for all API endpoints:\r\n          </Typography>\r\n          <pre><code>{`https://ani-rec.herokuapp.com/api/`}</code></pre>\r\n        </p>\r\n        <br />\r\n        <Typography variant=\"h6\" component=\"h2\" color='textSecondary'>\r\n          Some Important Response Parameters\r\n        </Typography>\r\n        <pre><code>\r\n            {`type\r\n            The type of response. Currently, there are two types: ['question', 'anime']\r\n            `}\r\n        </code></pre>\r\n        <pre><code>\r\n            {`current_id\r\n            The ID of the response. Each question or anime has a unique ID. \r\n            Use this ID to identify the current question in the \"/recommender/next\" endpoint. \r\n            `}\r\n        </code></pre>\r\n        <pre><code>\r\n            {`question\r\n            The question content in String format.\r\n            This is only specified if the response is of type 'question'.\r\n            `}\r\n        </code></pre>\r\n        <pre><code>\r\n            {`options\r\n            An array of option objects that contains the option title, a next_id, and the type.\r\n            Use the next_id to specify which option in the \"/recommender/next\" endpoint. \r\n            The next_id is always different from current_id.\r\n            This is only specified if the response is of type 'question'.\r\n            `}\r\n        </code></pre>\r\n        <pre><code>\r\n            {`animes\r\n            An array of anime objects that contains the anime name, the anime id, and a mal_id.\r\n            This is only specified if the response is of type 'anime'.\r\n            `}\r\n        </code></pre>\r\n        <pre><code>\r\n            {`mal_id\r\n            More IDs...\r\n            This is the MyAnimeList ID number for the anime.\r\n            `}\r\n        </code></pre>\r\n        <br />\r\n        <Typography variant=\"h6\" component=\"h2\" color='textSecondary'>\r\n          Endpoints\r\n        </Typography>\r\n        <Typography variant=\"body1\" gutterBottom>\r\n        <pre><code>{`GET   /recommender/start`}</code></pre>\r\n        <ul>\r\n          <li>Arguments: None</li>\r\n          <li>Returns: \r\n            <ul>\r\n                <li><i>type</i> (should always be of type 'question')</li>\r\n                <li><i>question</i></li>\r\n                <li><i>current_id </i> (should always be 0)</li>\r\n                <li>An <i>options </i> array</li>\r\n                <li><i>timestamp</i></li>\r\n            </ul>\r\n          </li>\r\n          <li>Example request: <pre><code>{`https://ani-rec.herokuapp.com/api/recommender/start`}</code></pre></li>\r\n        </ul>\r\n        <br />\r\n        <pre><code>{`GET   /recommender/next`}</code></pre>\r\n        <ul>\r\n          <li>Arguments\r\n            <ul>\r\n                <li>The ID of the current question</li>\r\n                <li>The next_id of the option you want to select</li>\r\n            </ul>\r\n            </li>\r\n          <li>Returns:\r\n            <ul>\r\n                <li>If the option results in a response of type 'question'\r\n                <ul>\r\n                    <li><i>type</i> (should always be of type 'question')</li>\r\n                    <li><i>question</i></li>\r\n                    <li><i>current_id</i></li>\r\n                    <li>An <i>options </i> array</li>\r\n                    <li><i>timestamp</i></li>\r\n                </ul>\r\n                </li>\r\n                <li>If the option results in a response of type 'anime'\r\n                <ul>\r\n                    <li><i>type</i> (should always be of type 'anime')</li>\r\n                    <li>An <i>animes </i> array</li>\r\n                    <li><i>timestamp</i></li>\r\n                </ul>\r\n                </li>\r\n            </ul>\r\n            \r\n          </li>\r\n          <li>Example request: <pre><code>{`https://ani-rec.herokuapp.com/api/recommender/next?question=1&option=2`}</code></pre></li>\r\n        </ul>\r\n        <br />\r\n        <pre><code>{`GET   /master_list`}</code></pre>\r\n        <ul>\r\n          <li>Arguments: None</li>\r\n          <li>Returns: A gigantic array of all the animes used in this recommender.</li>\r\n          <li>Example request: <pre><code>{`https://ani-rec.herokuapp.com/api/master_list`}</code></pre></li>\r\n        </ul>\r\n        </Typography>\r\n        <br />\r\n        <br />\r\n      </div>\r\n      </main>\r\n    </Container>\r\n    </React.Fragment>\r\n    </MuiThemeProvider>\r\n    );\r\n}\r\n\r\nexport default APIPage;",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":6,"column":8,"nodeType":"63","messageId":"64","endLine":6,"endColumn":18},{"ruleId":"61","severity":1,"message":"65","line":7,"column":8,"nodeType":"63","messageId":"64","endLine":7,"endColumn":18},{"ruleId":"61","severity":1,"message":"66","line":9,"column":8,"nodeType":"63","messageId":"64","endLine":9,"endColumn":12},{"ruleId":"67","severity":1,"message":"68","line":158,"column":39,"nodeType":"69","endLine":158,"endColumn":111},{"ruleId":"70","severity":1,"message":"71","line":182,"column":8,"nodeType":"72","endLine":182,"endColumn":10,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":202,"column":8,"nodeType":"72","endLine":202,"endColumn":23,"suggestions":"75"},{"ruleId":"61","severity":1,"message":"76","line":2,"column":17,"nodeType":"63","messageId":"64","endLine":2,"endColumn":25},{"ruleId":"61","severity":1,"message":"77","line":7,"column":8,"nodeType":"63","messageId":"64","endLine":7,"endColumn":13},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'SearchIcon' is defined but never used.","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createAnimeList' and 'createOptionList'. Either include them or remove the dependency array.","ArrayExpression",["80"],"React Hook useEffect has missing dependencies: 'createAnimeList', 'createOptionList', 'questionID', and 'selectedOption'. Either include them or remove the dependency array.",["81"],"'useState' is defined but never used.","'Prism' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [createAnimeList, createOptionList]",{"range":"86","text":"87"},"Update the dependencies array to be: [buttonPressed, createAnimeList, createOptionList, questionID, selectedOption]",{"range":"88","text":"89"},[6741,6743],"[createAnimeList, createOptionList]",[7512,7527],"[buttonPressed, createAnimeList, createOptionList, questionID, selectedOption]"]